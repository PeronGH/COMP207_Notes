In this part, we're going to talk about distributed databases, and this is an introduction video for that. In this video, I will discuss what a distributed database is and why they are important. Let me start with a bit of motivation for this distributed databases. So we have our running example with CS-DOR. And it's initially here in Liverpool, but now as it grows up, it will sort of appear in multiple different locations, and it will turn into a chain of stores. So like, you might have one in Manchester, you might have one in London, and each place is going to have a database storing whatever is relevant for them. For instance, this could be the sales and inventory information, and we might then have a central office storing everything else, like the employee's database, the customers' suppliers, and stuff like that. And then each site will store what inventory they have on their site. And basically, what we want to hear about now, or what this part is about, is getting a database that allows you to do all of these things by making queries from wherever. So the database management software is supposed to keep track of all these things, and say when you make a query down here about sales in London, you don't need to specify, well, I want to get the table from Manchester, send here, then I want to make this query on it, give me the output of that one. Instead, you're just saying, I want this output here, like before, and the database management system is then supposed to get all of these details done, and give you whatever output there is for that query you're trying to do. Naturally, it doesn't need to just be sort of locally like this. It could also be UK and China and US, that each has their own database. For instance, right now in Europe, it has this GDPR, which requires you not to store information about European things outside Europe. So that could be a reason for why you must have a database here in Europe. And similarly, other countries might have similar rules, requiring their own database, if you have information about some of their citizens. So this is basically the idea. We have multiple sites. Each site has their own database, and we need to get information from one site to another. And we run into a lot of trouble because of this. It's not really that complicated. You'll find out we don't really have that many videos about it, at least in length. But still, it's a topic to discuss. So of course, it's not just stores or stuff like that. It can also be other kinds of larger organizations or companies. And it might have different branches or offices around the country or countries or whatever. Or it could be for different sub companies or other things. And it could also simply be that your company has grown so large in this one location, that you cannot get everything done on one computer. You need multiple computers to handle all these transactions you get in. And again, distributed databases is here for you to do that. So yeah, the idea is that you can provide access to a large database of many users, for instance, for this online store. And we can distribute it over several computers. It doesn't need to be the same basic hardware. It can be different hardwares. It can be different software. I think nowadays it's typically mainly identical, at least for each site. So they have a bunch of computers in one place. They're typically quite identical because it's easier just to buy a ton of computers, set them up, and then let that be your database. But in principle, it could be different software, different hardware, and a database management system can handle this. So in general, computers could be at different physical sites. So it doesn't need to be just one site. However, they can be sort of quite co-located also. It's also reasonably common. It depends on what kind of issues you're dealing with. Still, there are some safety in having it at different sites because, well, if there's a fire in one site, the other site is hopefully fine. So it can be a good thing to have them at different sites. So some advantages of having multiple computers for it can be that you can balance the workload over the different computers. So one computer might want one query, another computer wants another one. And by simply having two, you get twice as much work done, or at least roughly twice as much work done. And instead of buying a more fancy and fancy computer and extending the hardware, you can just buy a physical computer and set it up, plug it into a network, and things that you're up and running instead of trying to get a more and more fancy hard disk or more and more fancy processor or whatever. So it's sort of easier to scale to a higher number of users using this distributed database, if you need to do so. Even though the base case is fairly fast already, you can do it even faster, or you can allow even more throughput by having multiple computers doing the same database, in essence. So that's kind of the problem we're interested in here in distributed databases and what we'll talk about here in this part. In the introduction to databases, I talked about some examples of companies that use databases. One of the examples was Amazon or Facebook. It's basically the same example from this point of view. We had a bunch of users doing a lot of requests at the same time. And on the other hand, behind the screens, we had a bunch of different computers running the database. It wasn't just one server, but say hundreds of servers for Amazon and thousands of servers for Facebook. And we had talked about the user side of it as the transaction management, where we have all these concurrency issues and stuff like that. But we haven't talked about the other part, where we have a bunch of computers and need to get those to work together nicely. That's what we're talking about in this part of the course. So let me come to a formal definition of what a distributed database is. It's a collection of multiple logically interrelated databases that are distributed over a computer network. So the database part comes from this logically interrelated databases. It was also the definition of a database. And the distributed part comes from that it's distributed over a computer network. It doesn't need to be, as I said, distributed over physical space. All the computers can be in the same place, but they need to be using multiple computers for it to be a distributed database. So we have some different sites here, A, B, and C. And we call these nodes or sites in the computer network. And they correspond to where the database is stored. And we have a bunch of lines connecting them. And we call those network links. In general, you might not have network links between every pair. But to make it simple in this part here, and because it's typically the case nowadays, I believe we're going to think of it as that each computer is connected to each other computer. It makes it easier to think of. And typically it's pretty much close to the truth anyway. So, yeah, here we are talking about this distributed database management systems that handle this kind of situation. There are some advantages in using this distributed databases. As all to some weaknesses, you need more computer hardware. It's more complicated and it doesn't scale perfectly. But still, there are some advantages. For instance, you can answer queries faster by having more computers do it. It's kind of obvious, I feel. Well, if you can make things work at least. So it produces the computer time, the disk accesses, the communication cost. Basically anything you can think of by simply having more nodes to do the same work. It's also, and this is pretty much the same kind of point, it's easier to scale this. You can just, if you find out your computers are not big enough, you just buy a new one, plug it in. It's up and running. It's fairly straightforward. So if you need more capacity or performance or whatever, buy a new computer, plug it in. Things are good. Of course, you have to spend a bit of money for that. But it's a fairly straightforward way of getting more performance. And besides that, and we have also discussed this earlier, this allows you to get more resilience. If a computer breaks down for some reason, hopefully you can get it from somewhere else by having something called replication. I will talk a bit more about it in the next few videos. But basically it's just backups that are running at the same time. And hopefully by having this kind of multiple places with the same setup, you can avoid catastrophic failures like a fire or whatever. Because a fire in one place is unlikely to cause a fire in another place. So hopefully you can avoid having a catastrophic failure of your entire system by using this kind of distributed databases. So if I should pick one thing you should take away from this video, then I'll probably pick the definition of what a distributed database is. Namely, well, it's a database that's distributed. So that means that we have our bonds of logically interrelated databases and they should be distributed over a computer network.