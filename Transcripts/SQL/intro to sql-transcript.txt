This video gives an introduction to relational databases and SQL. The video focuses especially on relational databases and how they're typically used, and also discuss a bit about SQL, standard query language, and talks about what the next many videos will be about. So the first thing I want to talk about is something called relational databases. I also mentioned them in introduction to databases, but I'm now going to talk about them more formally. So in a relational database, data is put into tables, also called relations. And we have two tables here. We have one with a table name of items and one with a table name of employees. Each table has a bunch of attributes, in this case, three for each of them. The items has an attribute of name, price, and number, and employees has one of birthday, first name, and family name. So in each table, we have a bunch of rows, or tuples as they're also called, and each tuple has a value for each of the attributes of the table it belongs to. So for instance, the tuple I'm pointing to here has a name of two liters of cola, a price of three dot zero zero, and a number of 30. All of those will have other values for the name, price, and number in general, and similarly for the employees table. Now, each of these attributes or columns has a specific data type associated, and all members of that column or attribute has the same data type. So for instance, if one of them is a string, then all in that attribute has a value of strings. If one of them is a number, then all of them is a number, and if one of them is a day, all of them are days. So a key thing here we'll be using a lot in the exercises and exams and so on is something called a schema, and the schema for items is items name, price, number, and the schema for employees is employees, birthday, first name, family name. So basically, it's a shorthand to tell you the essential parts of it, namely the name of the attributes together with the name of the table. And this is generally enough to search around in this data or to insert or remove things from the data. So typically, you don't really need so much more information about it than what the schema is for the different tables, and this is why we'll be using it. So I want to talk a bit about how our tables typically look like. Each table typically has a small number of columns or attributes that are going to be fixed over a long period of time. Then none of the attributes are going to change name or type of content or anything like that. They're just the same thing for long periods of time. Say you can think of the number of columns for typically say every five to ten, maybe smaller, maybe a bit bigger, but typically around this number. On the other hand, the number of rows can change over time. The content of the rows can change over time, and the number can very much depend on the type of context you're using it in. So in our small supermarket example, maybe 10, 20 rows in an employee's table might be reasonable because we might only have 10, 20 employees. For others, even in the small supermarket example, for instance, if you talk about transaction where you say, "I sold this item to that person," well, 100,000 rows might be a more reasonable number. And of course, if you have a larger example than a small supermarket, then you might have even bigger tables, like you can have billions or trillions of rows in one single table. So I wanted to point out here that these tables are for very much not square. They have a few columns and very, very many rows in general. Next, let me discuss how we typically use the rows of these tables. So each row of a table corresponds to either an entity of some kind, either physical or abstract entity, or to a relationship between sorts. So the rows of one table will always correspond to the same kind of thing. For instance, a row in an employee's table will correspond to one employee each, a row in an item's table will correspond to one item each, and so on. So let me come up with some examples highlighting these different kinds of things we might have in a table. Say we're looking at a transaction table. Then one row will correspond to each transaction, and we might have associated with each transaction one employee and a customer. As in the customer buys this transaction from the employee. And they might have some time and stuff like that. Each of these things can be done using a single attribute. However, we might also have a bunch of items associated with this transaction, because typically you're not going to limit how many items you want to sell in your shop, and therefore you need to not use attributes for it. So how do we do this? Well, we have a table then that says, well, this transaction is about this item and this amount of items, and it's about this transaction, this other transaction might involve this item, and so on. So we might just write a bunch of rows in this table saying that this customer is buying a banana and two liters of cola, for instance. So here we see an example where we have items, which is a physical entity. We have a transaction, which is an abstract kind of entity, and we have a relationship between these two things, as in what kind of items is involved in this transaction. Now, before moving on, I want to highlight a slight problem you'll run into if you try to mix in object-oriented programming with these relational databases. The problem is called impedance mismatch. So in databases, we're going to think of two rows as being the same exact thing if they have the same attributes. So if you have two equal rows, they're the same thing. In programming, we're typically thinking of two objects with the same properties, they're not the same thing. So there is sort of this not quite the same way of thinking of things here, and this causes quite a bit of problems, and these problems are referred to as impedance mismatch. I just wanted to mention it. It's not really that important, except if you start mixing in object-oriented programming. So, so far I have discussed relational databases in this introduction to SQL, so I'd better mention SQL at least a little bit. So the reason why I talk so much about relational databases is that the way you access them is using SQL, at least typically. SQL is the standard query language. So the standard for SQL is updated every few years. It started in '86 and has been updated like every two, three years, and was last updated last year. So while this sort of could sound like it's operating very regularly or very fast, in practice, the implementation of the SQL standards are moving even faster, so they might make a feature, then the standard might say, hey, this is a nice feature. But the implementation and the standard is not going to agree on the name on it, and therefore the standard will use one name, the implementation will use another, and the implementation will not typically change the name, because, well, old code written for the database system will not work anymore if you started changing the names of things. So therefore, the implementation will typically not follow the standards all that way. The last thing I want to talk about on SQL in this video is the three parts it's split into. The first part is the part of the language covering something called Data Definition Language, or DDL. The second part is Data Manipulation Language, or DML, and the third part is Transact SQL. The first part, Data Definition Language, is about creating, altering, deleting databases, tables, or the attributes. So this is here, we see how to make a database, how we make a table, and how we set the attributes. This is fairly short, it's going to be just one video. Next one, we're going to talk about Data Manipulation Language, and there it's about adding, removing, and updating data into the rows of the tables and afterwards querying them. The first part, adding, removing, and updating, is fairly straightforward. We're spending one video on it, the query part, however, is somewhat more complicated, and we'll spend five videos on it. You can also put the query part into the add, remove, and update parts, but it's typically not done. So you could view the query as being equally hard to add, remove, and update, but as I said, it's typically not done, so typically the query part is much harder than the add, remove, and update part. Finally, I will talk about Transact SQL, and while the first two items, Data Definition Language and Data Manipulation Language, is what we're doing in the tutorials for the first two weeks, Transact SQL is what we're doing afterwards, in the three weeks afterwards. So intuitively speaking, Transact SQL is about transactions, what is intuitively speaking, a sequence of SQL statements. So you might have three SQL statements, say, and you might say, I want these three SQL statements as being executed. That's one thing, and this leads to a lot of problems, and these problems are what we'll be handling in the part on Transact SQL, which will be in week three, four, five of the course, or week five, six, seven of the semester.