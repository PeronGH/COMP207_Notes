This video is about SQL DML except the queries. SQL was standard query language and DML was data manipulation language. And as I said, I will not talk about queries here because they are more complex and therefore they have their own video. So in short, data manipulation language has four parts. It's about how to insert rows into a table, it's how to delete rows in a table, how to update rows in a table and how to make queries for tables. And as I said, the query part is not in this video, but they are part of DML. Let's start by seeing how to insert data into tables. In this video, I'm going to look at a university example and it will be clear in a bit why I'm picking the university example here instead of using our running example of a CS store. So here we have a students table. It has a name column, a number column and a program column. And if I want to insert Oliver with this number and this program, I write insert into students, values begin parentheses, Oliver, comma, the number, comma, the program, end parentheses, end, and then the sum column. And that will give you this need table where we have added in Oliver as a new row. So this marks around Oliver is how we use to denote strings in SQL. It's not two marks like it is in some other programming languages. We can also be a bit more precise when we insert instead of like we did before, we just inserted everything. We can choose to only insert some of the columns. For instance, here, let's say we want to insert Danny, but we don't know his number, so we can write insert into students, program, comma, name, and the values in the program attribute, and then the name of the student, in this case, Danny. That will give you a new row containing Danny and the program, but not for the number because we don't know what it is based on our insert command. So before moving on from insertions, I want to talk about the most common exploit found online called SQL injections. It's half of all exploits found online are these SQL injections. So typically when people talk about it, they might mention something about little bubble tables. And this is this is a CD comic number 327. And it goes like this. Hi, this is your son's school. You're having some computer trouble. Oh, dear. Did he break something in a way? Did you really name your son Robert quotation mark in parentheses, semicolon, drop table students, semicolon, dastars, question mark. Oh, yes, little bubble tables we call him. Well, I hope you're happy. We lost this year's students records. And I hope you learn to sanitize your database inputs. So this is sort of well, reasonably, typically version of an SQL injection. Often they are much more severe than this. What happens here is that you're just losing all your students records. But often you will give people access to all your data, which is worse in the sense that you cannot see that you're giving people access to data. But here, at least you can see that you're lost all your students records and can just get a backup. So in some sense, this is a nice version of it. The real versions are worse. So what happens is that you have some kind of website where you have a form in and you take whatever people write into the form and insert it as fields into your command for inserting into a SQL database. Let me go over it on the next slide in more details. So say we have this insertion thing here. We have our students table and we insert into students program name like we did with Annie. And we write the values as being the program D700 on Tuesday. And then this robot quotation mark in semicolon drop table students semicolon does this and then quotation mark in parentheses semicolon because, well, the guy's name was this robot quotation mark drop table students blah blah blah. So what happens here is we end up not having a student table anymore because we have dropped it. So if you change the format a bit, it looks like this. We have inserted first robot into our table. Then we have removed the database table and this does this is used to denote comments. So it means that everything afterwards doesn't matter. So yeah, you have to be aware of this kind of exploits is very common type of exploits and try not to do them. And the way to avoid it is through this database sanitation checking that that say it doesn't doesn't contain this quotation mark and stuff like that. The things you insert. Now we know how to do insertion. Now we know how to not do SQL indexes. Let's look at how to remove things from our database. So let's say we want to remove John from our table here. The way we do it is we write delete from students where name equal to John semicolon. And that's been remove all rows for students named John. So typically you will not use name equal to something you would use this number because that's probably his student ID which should be unique for him. And I would not be so good at Danny doesn't have one but still. I want you to be careful though when they can this kind of delete commands. If you put the semicolon badly, for instance, just after students, you will delete everything in the students table, and then your database management system will tell you that there is an error in this commands, but right where name equal to john because that's not a proper command in itself. But still, I mean, you're a bit unhappy because you don't have a student stable anymore. So try to be careful about it. Basically, what's going on here is a straight form part of just a phone call sets input table in this case to student. And the second lines mean where the name is john it's fairly obvious, but we'll get this kind of where from part later on. And then it starts to be more complicated. Specifically when we get to queries. Next slide, I'm going to go through what you can do in this where but not quite everything, some part will be left to the query part because it has to do with subqueries. So what can you do in where clauses? Well, you can do comparisons, you don't necessarily need to use equality, you can do smaller than, smaller than or equal to, bigger than, bigger than or equal to, or not equal, not equal is done by writing smaller than followed by bigger than. Or you can also sometimes in some SQL implementation use bang equal, like you might have seen in some programming languages. But still the standard says smaller than bigger than. So it's used for equal strictly less than less than equal greater than or equal or strictly greater and not equal. For instance, you can use it for numbers, but you can also use it for strings, then it will use lexicographic order and you can use it for dates. Again, then it will use it for a day before being smaller than a day after. Besides that, you can also sort of put multiple things together, for instance, you can use and, meaning if you want to have two things, for instance, say you want to have students named Oliver who are in the program of G412, you can write name equal to Oliver and program equal to G42. If you want to use or instead of and, you just write or instead of and. Again, I think I should point out here that in SQL we write things out like this instead of using symbols like you might have seen in Java or Python. Also for writing everything but something you write not. So for instance, if you wanted it to be everything but name equal to Oliver and program equal to G402, you write not and in parentheses name equal to Oliver and program equal to G402 in parentheses. You can also use some kind of between command, it's not complicated really, it's mainly for numbers, I think you can also use it for other things so but for instance, you can write price between 10 and 20 if you want the price to be between 10 and 20. It's kind of self explanatory I feel. Definitely it's talking about the interval from 10 to 20. Finally, the most complicated part. I mentioned in this slide at least is the like command. It's for something called regular expressions. You might not have seen it yet. But I think you might see it later. So underscore will match one letter and percentage sign match any number of letters so if you write name like O, percentage sign R, or you write name like O, four underscores R, then both of those match Oliver. Because Oliver starts with an O and an R and has four letters in between those two. Now the final thing I want to mention right now about where is the in command. There will be a bit more on where when we get to the optional part of SQL queries because some commands you can do in the where part involves doing subqueries, and it makes more sense to talk about that when you know what a query is. So let's see an example of in that doesn't use subqueries you can write delete from students where name in and then a list. So the list is starting with parentheses, invert parentheses, and this comma symbol which is so like you can write John comma Sebastian here in the command and that what this command is doing delete from students by name in John comma Sebastian is checking if the name is either John or Sebastian. And in this case, then deleting the student. So in this case, we just deleting the student containing John because I know Sebastian's in the table. And again, as I mentioned, there'll be more on this command in the video on queries specifically the optional part of queries. The final thing in this video is the update command. Specifically, I will look at how to change the row containing Oliver. The way you do it is you write update, then the name of a table, let's say students, then you write sets, and then you write some kind of chains. For instance, we can write programming equal to G402 if we want to change the program it to be G402. And then we have this where command like before, if you don't include it, you change it for all rows, but that's included here because that's the typical use of it. That's included with where name equal to Oliver, that means that we update the row containing Oliver to have a program of G402. It's not really that complicated a command, that's what Sphinx calls. But again, please be aware you need to write it update set where, because otherwise your implementation will very likely give you an error for it. You can also do relative changes. So you can write update students set number equal to number plus one when name equal to Oliver to increment the number of Oliver's row. So I want to highlight here that this means that the equality means different things in a different line. So the equality in the where line is for comparison like equal equal is in Python or Java, and the equality in the set line is for chains of values like equal is in Python and Java. Yeah, it's just to highlight that there is a slight issue here you might want to be aware of. So this was all for this video on SQL TML, except that we're going to discuss the queries in the next many videos. [ Silence ]