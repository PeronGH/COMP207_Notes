In this video, I'm going to discuss the basics of XPath. So in this video, I will cover the basics of XPath, and in the next few videos, I will cover more advanced XPath instructions, as well as some examples for it. So this video is just giving you the basics, and in the most basic form, XPath is about a file path in your XML file. So if we go back, we had this intuition for XML in this basics XML video, that basically it corresponds to the inner nodes being folders, and leaves being the files. And now, if you think about it, we can then define a path in this, and basically this kind of path is an XPath. Now there was a problem with this metaphor. It was that children could have the same name. So we had, the root has two children, it's named lecture. So what do we do when we have multiple children of the same name? What does it mean to have a path here? Well, there are two simple things you can do. You can return all of them, or you can return the if item, or like the first item, or the last item, or random item, or any other way you can think of. And XPath will allow you to do this kind of thing, and many other things as well. Here in the basics, we'll just see how to do the return all part, but we'll see what's more advanced application of it in the next video. So what can we use XPath to search for? Well, we can basically return any nice part of an XML document like this. So you can return values or nodes from an XML document. So values could be something like strings or integers, and stuff like that. And you could, for instance, return this subset of the strings. So yeah, this subset is a bit arbitrary, and you can still return it if you write a complicated enough XPath for it. There's also a bunch of nodes you can return. You can return the document node. This is different from the root node. The document node covers everything where the root node will sort of have the opening and closing text, and then the inside of the root node will be everything but the students and /students. But the document node is basically the full thing. We can also do things like element nodes, like we could return this element here, the student element of Anna, or we can return attributes. For instance, we can return this attribute down here, or any other attribute in the system. Let us start with the very basics of XPath. The most basic path looks something like this. You start with a /, then the name of an attribute, then a /, name of an attribute, then a /, and so on. And at some point you stop. And whatever you can read by following this path to the system, or this kind of path to the system, that's what this XPath is going to return. So some examples here. We might write students. That selects just a root element, or students/student. That will select all the student element under the students root element. So the idea is you start up at the top, then you proceed down to the student with /, that was it for the first query. That's just going to return that root element. When you then write this next class on student, you come from here, and you follow each of these student edges, and we return everything you can do from there. And if it had been longer, when we were continuing for this two places, we would continue for this two places, and working through all the edges the next level would say talk about. And you just continue like this, and at the end you return whatever set you entered. And this is, well I don't know if it's super important, but it's a property at least. Things are returned in document order. So whenever you're finished with the XPath, it's just going to return first one in document order, then the second one in document order, and so on, until you are done with your XPath return. Let's try with some examples. Let me start with this one, example one. Here we have this XPath in our examples from earlier with our lectures database. So we have lectures first. So we go from the top element down here to the root element. Then we walk to all the lecture edges getting up out here, and then we walk to the name edges ending up down there. And now the path is not longer, and we just return whatever we got to. So it's going to output name j.fundly and name m.gyring. And it's going to return it in document order as in its first returning j.fundly and then m.gyring with these text amount. So I want to show you how to use this online tool called Sorbet to play around with XPath commands. So when you start it, it looks like this. It's this live demo in Sorbet. There's a link to it on the website just above this video. So when you start it, it looks like this. When you want to use your own XML document, if you press these two downloads here, it opens this area. And you can then write an XML file here, like I have written one for our example database. It's also attached or written about in the area above the video. And this is exactly the same one as our tree, except in the tree I had this embersand on the space. But this Sorbet doesn't like embersand, so I deleted it, because otherwise I'll just get an error message when I run this. So to use it, you write doc up here, mydoc.xml, because this area is called mydoc.xml, and then end parentheses, and then lecturers, like this, /lecturer/name. And when you're finished writing your XPath command like this, you just press execute, and it spits out the result, if it's correctly written. So the first line is saying this XML document is stuffed down here, and then the first part is named John Fernley, and then name Martin Geiring. You can see this is correct, because lecturers, lecturer name gives you John Fernley, and the other way you can do a name is lecturers, lecturer, and name Martin Geiring. So that's why it outputs this, and why it outputs this in that order. Let's try a sync head example here. Here I'm going to do this command instead of lecturers, lecturer teaches us this here. Just so you can see how we can also lose paths before we gain the path, because we had two ways to get down to John Fernley, and one way to get to John Fernley, and one way to get to Martin Geiring, giving us two outputs last time. Here we'll end up starting with two, and then getting back to one again. So we start up here, lecturers, then we split in two, lecturers, and teach us again that we're still two paths, but because we've only added year on the right hand side with Martin Geiring, the last part will only give you the year on the right hand side. So therefore the output is going to be year two, and an end of the year tag. So let me show how to do it again in this SOPAM. So again you write whatever document you wanted down here. Again it's the same document as before. And up here you write doc mydoc.xml and an end parenthesis, and then lecturers/teachers/here, and then you press execute. And as we saw before, we get the right output, we get this too, because lecturers, well we can get into two things here, lecturers/teachers/here, there's only one where we have two at the end. So that's why we end up with this result. Now this next part I cannot really show in Sorbet, because it's about having relative paths. It doesn't look that nice in Sorbet. We can show it, how to use it later, but right now we will not be able to use it. So we can do relative paths with the start somewhere else. You can write a relative path that just goes from there. We don't evaluate this as a root, but we evaluate from wherever you're starting. So say we do student/name. It will return all name elements of student elements below a given node. So for instance, if we started here, then it will go down here, and down here to Anna. It will also try to go into the other one, but there was nothing under it, so it wouldn't do anything there. And again, the result is returned document order, just like before. So one thing that is in Sorbet is attributes. So I've already mentioned it earlier actually, when I talked about XML schema, because it was also using xpath when it talked about these key elements. So there I was also mentioning an attribute. The background was name. So the idea is basically you just write your command as before, but in the last one you can write add and then the name of an attribute, and the name will output whatever attribute you wrote in there. So yeah, here a was the name of an attribute. So for instance, slash student slash student slash add name will return Anna, Ben, and Chloe on this fragment here, because the students are named Anna, Ben, and Chloe. Another case could be students slash students slash modules slash add code. In this document it will return comp 207 and comp 219 as the comp commands. And we can also do relative paths like student slash add name if we started at the boot node as in this inside the students element. Now it doesn't actually work in Sorbet. You must add this slash data or an attribute to get it to output, but otherwise everything works nicely. And again, things are returned in document order, as you can also see here. We return first Anna, then Ben, then Chloe. So let's try to do it in Sorbet again. In this case we just write the XML file on the slide. You just copy paste it in like this without the last end I believe, otherwise there might come an error. And then up here, like before, you write doc mydoc.xml and then students slash student slash add name. And as I said, this doesn't work because we need to write data, so I just want to show you that it doesn't work. So it says something about cannot serialize attribute nodes if you do this without writing this slash data at the end. But if you write it like this, you get the command I said before. You get Anna, Ben, and Chloe on this document, because Anna is first, then Ben, and then Chloe for the student elements. And of course we can also write the other command, which was students slash student slash module. And then it was slash code. And again, it doesn't work without this data part, but I don't see much point in showing it that it doesn't work again. So we just press execute and we get this COM 207 and COM 219. As we see that this is the right output first COM 207 and then COM 219, and Chloe didn't have any. And I cannot show the last one, as I said we don't have so nicely relative paths in this. Let me show you the final part I want to show in this basic XPath video. We can use a star as a wildcard to stand in for any name or attribute name. So for instance, you can write slash student slash student slash star. This will return all elements that are directly below a student element. Like on this document it will return program code, D4 and 2, module code equal to COM 207. There's three dots and N module code. And then the same for Ben's program as in program code equal to D702, module code equal to COM 219, three dots and module and email Ben@live.ac.uk end email. And that's it for what this command will return. Similarly you can also return all the attributes under something. This command here will return all the attributes of all the modules. Specifically it will return COM 207 and COM 219, because the modules didn't have any other attributes. Let's do it one more time. You write your document down here. You write a doc mydoc.xml then students slash student plus star. Execute. It gives you this output here. So this part here is what you have here. And the next part from here to the end is what you had inside Ben. So that checks out. And we can also do it with attributes. So we could write a module here, slash add. And again it doesn't work if you don't write slash data. But then it works. It gives you COM 207, COM 212. So as a summary in this video I covered simple paths like basically file paths in XML, including relative paths. I covered things like attributes, how to access those using this add, and wildcards.