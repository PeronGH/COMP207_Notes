In this video, I will introduce you to data analysis. In this part of the course, we'll be seeing data analysis and data mining. We'll start with analysis and then move into mining in a few videos. So we started in this course, we're talking about relational databases and transaction management and query processing, moved into distributed databases slightly outside standard relational chatting, I guess, and then we moved directly into the beyond relational databases. And now we're moving back again to the relational data. So again, we're going to see SQL and so on. But we're going to focus on other kind of queries than what we were doing earlier. We were especially talking about queries where you ran a lot of queries at the same time. Here we'll focus on having a few complex queries. But again, otherwise it's sort of the same thing. But because of this difference, we need another kind of technology. We need something called data warehousing. They are much more expensive, this kind of databases, than the ones you've seen earlier. But it will allow you to handle another kind of problems we haven't been doing so far. Before getting dragged into too much formalities and so on, let me try to explain where this kind of data analysis is used and why we might want to use this. So say you have a big company of some kind, it doesn't really matter precisely what kind, and it has some product itself. It doesn't really actually need to be products, but this kind of thing, this sells something. And it might have a database with this kind of schemas, it might have a sales relation with product numbers, say date, store name, and pies, and it might have a stores relation with name, CD, country, and phone number. It doesn't really matter precisely what you have, but this is sort of the common kind of setup. As in you have some basic part here, you care about the sales, and you have some auxiliary information, like here the stores, it's a bit auxiliary to the sale itself. Well, you have more information about the stores. So a typical example query for data analysis, and this is the same kind of query focused on the basic part, and well, it wasn't that heavily used in the query processing part, and wasn't basically used at all in the transaction management part, but here we have sort of multiple tables, and we combine them, and here basically using a natural join, but they have different names, so formally it's nequijoint, and we also check that the data is sufficiently large. And then we cover it by country, and then we take the average price here. So what the query is doing is, well, fairly obvious, you take the each country's average sales price for the items that it has been selling. For some reason, you might want to be interested in this information when making decision about what to do. You might think, hmm, well, wasn't this always the same? Not really. If you think about, say, Amazon or Facebook or whatever, most of the information you get is just sort of a lot of information from one table, typically restricted in some kind of way within a where clause, and then ordered by something. But it's not really somewhat the case here. Here we have information for different tables, and we're displaying pretty much everything of these different tables. Well, aggregated into an average price here. In the other case, we just displayed a few things, say on Facebook or on Amazon, just displayed a few things. And it doesn't really depend on most of the data, the few things we display. Let's take another example, just to show that it's more general than just, well, the first example was already quite general. But let's come with another example. Say you have a hospital. I mentioned this example before in the introduction to databases video. And you want to analyze the risks or figure out what best mode of treatment is or stuff like that. Well, typically, schemas will look a bit abstractly like this. You might have, similar to the previous slide, you have sort of main relation, like here, episodes of care is a main relation. It gives you the date, the patient ID, the diagnosis ID, the treatment ID, and so on. And then we have sort of more information about these different parts, like we have more information about the patients, say the name, age, gender. We have more information about diagnosis. Again, I don't really know precisely what that would be. And we might have more information about the treatment, exactly what was done and stuff like that. And now we can use this kind of table to do analysis for the best mode of treatment, given a certain diagnosis. I mean, what has worked well on all our other patients, it's probably reasonable to do that. You might get information about the average length of stay from your episodes of care relation, stuff like that. And again, it's all based off having sort of reasonably complex queries that requires most of the data and some, typically some kind of aggregation or, yeah, coding down on information in some other similar way. And again, I said this is opposite to this kind of Facebook setting or Amazon settings we have mainly been focusing on beforehand. Let me try to be a bit more abstract about it, as I try to explain what kind of settings we're interested in here. So here we're typically using quite complex queries. As I said, this is quite opposite to say this Amazon or Facebook setting, where we're using simple queries. Here we're going to be using aggregates or group by and stuff like this. Quite advanced features of the SQL syntax compared to what you would be using, say, for basic page on, say, Amazon or Facebook. So, for instance, we have seen this query here, where we're taking the average pies per country of the items sold. And the key thing you should see here is that this kind of queries examines basically the full database. So, for instance, this query here specifically, it will take, well, only the newer sales and presumably all the stores, but it's going to lock down a huge part of your database if you're using locks for this at least. Of course, if you're using other techniques like this multiple version, go into control, it's not going to lock things, but it might cause restarts anyway of other transactions. So that's still bad. And it will also be really bad if this one restarted because that will be quite expensive because it examines so much data. And therefore, if you think about it, if it's going to lock down your database, you probably shouldn't be doing it, basically, because, well, if you're Amazon or Facebook, people are not going to be happy if you're certainly locking down your website because you want to run this kind of query, even though, well, you will get money out of it if you do this kind of thing. So normal databases are typically focusing on this more simple queries, but working on many at a time. And therefore, these more complicated queries are not done as well as the simple ones. I mean, sure, they can still run them, but they're not as fast as they could be. So there's specialized technologies, software for it called data warehousing, as to handle these more complex settings. So typically, how it looks like is you have a data analyst sitting there writing queries up against a data warehouse that stores all this information from whatever database or databases it relied on. So typically, the way this is done, as in how it's updated, is that you have, say, a bunch of databases, say, each store might have its own database, and then we should extract all this information and put it into the data warehouse at least once in a while. Specifically, the pattern they use is something called extract, transform, load. So you extract the data from the databases, you transform it into having a common schema, and then you load it into a data warehouse where the data analyst can then run his queries based on that. Now, and this should not really be surprising, I guess, because of how we're doing things, this is not constantly updated. What we might update is, say, every day or so. Say at midnight you want this query. If it's a store, it's probably fine. There's not that many customers around after midnight anyway. So you have probably time to do it if it's sort of a real physical store that we're talking about. But there might be other times where you can do it, as in the extract, transform, load part, or you might do it in other ways. It depends on what kind of setup you have. But you might update it, say, every day. And then after that, the data analyst can then continue and get his, well, not perfectly updated information, but reasonably updated information. Typically, this kind of thing doesn't require the most updated information possible. I mean, if it's the right treatment today, say, in the hospital scenario, it was probably also the right treatment yesterday. Let me be more explicit about the differences between what we're looking at now versus what we looked at before. So right now, we're going to look at OLAP, online analytic processing. It refers to the process of analyzing complex data in one of these data warehouses. And this kind of queries, we typically do end up looking something like the one we saw earlier, as in, you aggregate a lot of information together, throw out part of it, and then that's what you output it of your query. This is against what we looked at before, which is called OLTP, or online transaction processing, which basically focuses on this traditional database tasks, like we have a small update or small query, and these should be done fast. And each small operator query is only going to touch a small, tiny part of the database, and therefore we can make a lot of queries at the same time, because probably we are handling different parts of the database. So here we have seen something about OLAP, which is typically a relatively small number of queries, but each very complex and is about a very large fraction of the database, involving things like GroupBy, application, and where clauses, and this is opposite to this OLTP we have seen earlier, which consists of many queries at once, but where each is typically simple and only affect a small part of the data in your database. Peace. [BLANK_AUDIO]